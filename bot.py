import os
import sys
import logging
from datetime import datetime, timedelta
import signal
import re
import traceback
from typing import Dict, Any, Optional, Tuple
import asyncio
import asyncpg # –ò–∑–º–µ–Ω–µ–Ω–æ: –∏–º–ø–æ—Ä—Ç asyncpg
import pytz
from dotenv import load_dotenv
from telegram import __version__ as ptb_ver, Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
BOT_STATE = {
    'running': False,
    'start_time': None,
    'last_activity': None
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# DB_FILE = 'db.sqlite' # –£–¥–∞–ª–µ–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è PostgreSQL
# BAD_WORDS_FILE = 'bad_words.txt' # –£–¥–∞–ª–µ–Ω–æ: bad_words –±—É–¥—É—Ç –≤—Å—Ç—Ä–æ–µ–Ω—ã
DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞", "–Ω–æ–º–µ—Ä", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∑–≤–æ–Ω–∏—Ç–µ", "–ø–∏—à–∏—Ç–µ", "–∫–æ–Ω—Ç–∞–∫—Ç", "–º–∏–Ω–µ—Ç", "–º–∏–Ω–µ—Ç—á–∏–∫", "–º–∏–Ω–µ—Ç—á–∏—Ü–∞", "–º–æ–∫—Ä–æ—â–µ–ª–∫–∞", "–º–æ–∫—Ä–æ—â—ë–ª–∫–∞", "–º–∞–Ω–¥–∞", "–º–∞–Ω–¥–∞–≤–æ—à–∫–∞", "–º–∞–Ω–¥–∞–≤–æ—à–∫–∏", "–º–∞–Ω–¥–µ–π", "–º–∞–Ω–¥–µ–Ω—å", "–º–∞–Ω–¥–µ—Ç—å", "–º–∞–Ω–¥–∏—â–∞", "–º–∞–Ω–¥–æ–π", "–º–∞–Ω–¥—É", "–º–∞–Ω–¥—é–∫", "–º–∞–Ω–¥—é–≥–∞", "–º—É–¥–æ–µ–±", "–º—É–¥–æ–∑–≤–æ–Ω", "–º—É–¥–æ–∫–ª—é–π", "–Ω–∞–µ–±–∞—Ç—å", "–Ω–∞–µ–±–µ—Ç", "–Ω–∞–µ–±–Ω—É—Ç—å", "–Ω–∞–µ–±—ã–≤–∞—Ç—å", "–æ–±–æ—Å—Ä–∞—Ç—å", "–æ–±–æ—Å—Ü–∞—Ç—å", "–æ–±–æ—Å—Ü–∞—Ç—å—Å—è", "–æ–±–¥—Ä–∏—Å—Ç–∞—Ç—å—Å—è", "–æ–±—ä–µ–±–æ—Å", "–æ–±—å–µ–±–∞—Ç—å", "–æ–±—å–µ–±–æ—Å", "–æ—Ç–ø–∏–∑–¥–∏—Ç—å", "–æ—Ç–ø–∏–∑–¥—è—á–∏—Ç—å", "–æ—Ç–ø–æ—Ä–æ—Ç—å", "–æ—Ç—ä–µ–±–∏—Å—å", "–æ—Å—Ç–æ–µ–±–µ–Ω–∏—Ç—å", "–æ—Å—Ç–æ–ø–∏–∑–¥–µ—Ç—å", "–æ—Ö—É–µ—Ç—å", "–æ—Ö—É–µ–Ω–Ω–æ", "–æ—Ö—É–µ–≤–∞—Ç—å", "–æ—Ö—É–µ–≤–∞—é—â–∏–π", "–ø–∞—Å–∫—É–¥–∞", "–ø–∞–¥–ª–∞", "–ø–∞—Å–∫—É–¥–Ω–∏–∫", "–Ω–∞—Ö–µ—Ä", "–Ω–∞—Ö—Ä–µ–Ω", "–Ω–∞—Ö—É–π", "–Ω–µ—Ö–µ—Ä–∞", "–Ω–µ—Ö—Ä–µ–Ω", "–Ω–µ—Ö—É–π", "–Ω–∏–∫—É—è", "–Ω–∏—Ö—É—è", "–Ω–∏—Ö–µ—Ä–∞", "–Ω–µ–ø–∏–∑–¥–∞", "–Ω–∏–ø–∏–∑–¥–∞", "–Ω–∏–ø–∏–∑–¥—É", "–Ω–∞–ø–∏–∑–¥–µ–ª", "–Ω–∞–ø–∏–∑–¥–∏–ª–∏", "–Ω–∞–µ–±–Ω—É–ª—Å—è", "–Ω–∞–µ–±–∞–ª—Å—è", "–ø–µ—Ä–¥–µ–∂", "–ø–µ—Ä–¥–µ–Ω–∏–µ", "–ø–µ—Ä–¥–µ—Ç—å", "–ø–µ—Ä–¥–∏–ª—å–Ω–∏–∫", "–ø–µ—Ä–¥—É–Ω", "–ø–µ—Ä–¥—É–Ω–µ—Ü", "–ø–µ—Ä–¥—É–Ω—å—è", "–ø–µ—Ä–¥—É—Ö–∞", "–ø–µ—Ä–¥—É–ª—å–∫–∏", "–ø–µ—Ä–¥–Ω—É—Ç—å", "–ø—ë—Ä–Ω—É—Ç—å", "–ø–µ—Ä–Ω—É—Ç—å", "–ø–µ—Ä–¥—è—Ç", "–ø–∏–∑–¥—è—Ç", "–ø–∏–∑–¥–∏—Ç—å", "–ø–∏–∑–¥–∏—à—å", "–ø–∏–∑–¥–∏—Ç—Å—è", "–∑–∞–µ–±–∞–ª", "–∑–∞–µ–±–ª–æ", "–ø–∏–¥–∞—Ä", "–ø–∏–¥–∞—Ä–∞—Å", "–ø–∏–¥–æ—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "–ø–∏–¥–∏–∫", "–ø–µ–¥—Ä–∏–∫", "–ø–µ–¥–µ—Ä–∞—Å—Ç", "–ø–∏–¥—Ä–∞—Å", "–ø–∏–¥—Ä—ã", "–ø–∏–¥—Ä–∏–ª—ã", "–ø–∏–¥—Ä–∏–ª–æ", "–ø–µ–¥—Ä–∏–ª–æ", "–±–ª—è–¥–∏–Ω–∞", "–±–ª—è–¥—å", "–±–ª—è–¥—Å—Ç–≤–æ", "–±–ª—è–¥—Å—Ç–≤—É—é—â–∏–µ", "–±–ª—è–¥—Å—Ç–≤—É–µ—Ç", "—à–∞–ª–∞–≤–∞", "—à–∞–ª–∞–≤–æ—Å—Ç—å", "—à–∞–ª–∞–≤–∏—Ç—å—Å—è"]
MAX_NAME_LENGTH = 50
MAX_TEXT_LENGTH = 4000
MAX_CONGRAT_TEXT_LENGTH = 500
MAX_ANNOUNCE_NEWS_TEXT_LENGTH = 300
CHANNEL_NAME = "–ù–µ–±–æ–ª—å—à–æ–π –ú–∏—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID")) if os.getenv("CHANNEL_ID") else None
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID")) if os.getenv("ADMIN_CHAT_ID") else None
TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", 'Europe/Moscow')) # –°–¥–µ–ª–∞–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
WORKING_HOURS = (0, 23)  # 00:00-23:59 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)
WORK_ON_WEEKENDS = True

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL
DATABASE_URL = os.getenv("DATABASE_URL")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not CHANNEL_ID:
    logging.warning("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
if not ADMIN_CHAT_ID:
    logging.warning("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î.")

# –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
REQUEST_TYPES = {
    "congrat": {"name": "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"}
}

# –ü–æ–¥—Ç–∏–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
ANNOUNCE_SUBTYPES = {
    "ride": "üöó –ü–æ–ø—É—Ç–∫–∞",
    "offer": "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "lost": "üîç –ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏"
}

# –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
HOLIDAYS = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "01-01",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "02-23",
    "üíê 8 –ú–∞—Ä—Ç–∞": "03-08",
    "üèÖ 9 –ú–∞—è": "05-09",
    "üá∑üá∫ 12 –ò—é–Ω—è": "06-12",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "11-04"
}

HOLIDAY_TEMPLATES = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!\n–ü—É—Å—Ç—å –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è!",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞!\n–ú—É–∂–µ—Å—Ç–≤–∞, –æ—Ç–≤–∞–≥–∏ –∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π!",
    "üíê 8 –ú–∞—Ä—Ç–∞": "–° 8 –ú–∞—Ä—Ç–∞!\n–ö—Ä–∞—Å–æ—Ç—ã, —Å—á–∞—Å—Ç—å—è –∏ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
    "üèÖ 9 –ú–∞—è": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã!\n–í–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å –≥–µ—Ä–æ—è–º!",
    "üá∑üá∫ 12 –ò—é–Ω—è": "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏!\n–ú–∏—Ä–∞, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ!",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞!\n–°–æ–≥–ª–∞—Å–∏—è, –º–∏—Ä–∞ –∏ –¥–æ–±—Ä–∞!"
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    TYPE_SELECTION,
    SENDER_NAME_INPUT,
    RECIPIENT_NAME_INPUT,
    CONGRAT_HOLIDAY_CHOICE,
    CUSTOM_CONGRAT_MESSAGE_INPUT,
    CONGRAT_DATE_INPUT,
    ANNOUNCE_SUBTYPE_SELECTION,
    ANNOUNCE_TEXT_INPUT,
    WAIT_CENSOR_APPROVAL
) = range(9)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        # logging.FileHandler('bot.log'), # –£–¥–∞–ª–µ–Ω–æ: –ª–æ–≥–∏ –≤ stdout
        logging.StreamHandler(sys.stdout) # –ò–∑–º–µ–Ω–µ–Ω–æ: –ª–æ–≥–∏ –≤ stdout
    ]
)
logger = logging.getLogger(__name__)

# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
db_pool = None

async def get_db_connection():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞."""
    global db_pool
    if db_pool is None:
        db_pool = await asyncpg.create_pool(DATABASE_URL)
    return await db_pool.acquire()

async def release_db_connection(conn):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª."""
    global db_pool
    if db_pool:
        await db_pool.release(conn)

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –¥–ª—è PostgreSQL."""
    conn = None
    try:
        conn = await get_db_connection()
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                username TEXT,
                type TEXT NOT NULL,
                subtype TEXT,
                from_name TEXT,
                to_name TEXT,
                text TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                publish_date DATE,
                published_at TIMESTAMP WITH TIME ZONE,
                congrat_type TEXT
            );
        """)

        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_approved_unpublished
            ON applications(status, published_at)
            WHERE status = 'approved' AND published_at IS NULL;
        """)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î PostgreSQL: {e}", exc_info=True)
        raise
    finally:
        if conn:
            await release_db_connection(conn)

async def add_application(data: Dict[str, Any]) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = None
    try:
        conn = await get_db_connection()
        app_id = await conn.fetchval("""
            INSERT INTO applications
            (user_id, username, type, subtype, from_name, to_name, text, publish_date, congrat_type)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            RETURNING id;
        """,
            data['user_id'],
            data.get('username'),
            data['type'],
            data.get('subtype'),
            data.get('from_name'),
            data.get('to_name'),
            data['text'],
            data.get('publish_date'),
            data.get('congrat_type')
        )
        return app_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {data}", exc_info=True)
        return None
    finally:
        if conn:
            await release_db_connection(conn)

async def get_application_details(app_id: int) -> Optional[asyncpg.Record]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ ID."""
    conn = None
    try:
        conn = await get_db_connection()
        return await conn.fetchrow("SELECT * FROM applications WHERE id = $1", app_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return None
    finally:
        if conn:
            await release_db_connection(conn)

async def get_approved_unpublished_applications() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    conn = None
    try:
        conn = await get_db_connection()
        return await conn.fetch("""
            SELECT id, user_id, username, type, subtype, from_name, to_name, text, publish_date, congrat_type
            FROM applications
            WHERE status = 'approved' AND published_at IS NULL
        """)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        return []
    finally:
        if conn:
            await release_db_connection(conn)

async def update_application_status(app_id: int, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏."""
    conn = None
    try:
        conn = await get_db_connection()
        await conn.execute("UPDATE applications SET status = $1 WHERE id = $2", status, app_id)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False
    finally:
        if conn:
            await release_db_connection(conn)

async def mark_application_as_published(app_id: int) -> bool:
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é."""
    conn = None
    try:
        conn = await get_db_connection()
        await conn.execute("""
            UPDATE applications
            SET published_at = CURRENT_TIMESTAMP, status = 'published'
            WHERE id = $1
        """, app_id)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False
    finally:
        if conn:
            await release_db_connection(conn)

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ü–µ–Ω–∑—É—Ä–∞ ---
def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏."""
    if not name or not name.strip():
        return False

    name = name.strip()
    allowed_chars = set("–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø -")
    return (2 <= len(name) <= MAX_NAME_LENGTH and
            all(c in allowed_chars for c in name) and
            not name.startswith('-') and
            not name.endswith('-') and
            '--' not in name)

def is_holiday_active(holiday_date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ (+/-5 –¥–Ω–µ–π –æ—Ç –¥–∞—Ç—ã)."""
    try:
        current_year = datetime.now().year
        holiday_date = datetime.strptime(f"{current_year}-{holiday_date_str}", "%Y-%m-%d").date()
        today = datetime.now().date()
        start = holiday_date - timedelta(days=5)
        end = holiday_date + timedelta(days=5)
        return start <= today <= end
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: {e}", exc_info=True)
        return False

async def load_bad_words() -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã."""
    return DEFAULT_BAD_WORDS # –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

async def censor_text(text: str) -> Tuple[str, bool]:
    """–¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    bad_words = await load_bad_words()
    censored = text
    has_bad = False

    for word in bad_words:
        try:
            if re.search(re.escape(word), censored, re.IGNORECASE):
                has_bad = True
                censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
        except re.error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã —Å–ª–æ–≤–∞ '{word}': {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)

    # –¶–µ–Ω–∑—É—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ DEFAULT_BAD_WORDS)
    # try:
    #     censored = re.sub(
    #         r'(–∑–≤–æ–Ω–∏—Ç–µ|–ø–∏—à–∏—Ç–µ|—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä|—Ç–µ–ª\.?|—Ç\.)[:;\s]*([\+\d\(\).\s-]{7,})',
    #         '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞ (–ø–∏—à–∏—Ç–µ –≤ –õ–°)',
    #         censored,
    #         flags=re.IGNORECASE
    #     )
    # except re.error as e:
    #     logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}", exc_info=True)

    return censored, has_bad
    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def safe_send_message(bot: Bot, chat_id: int, text: str, **kwargs) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        return True
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)
    return False

async def safe_edit_message_text(query: Update.callback_query, text: str, **kwargs):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not query or not query.message:
        return
    try:
        await query.edit_message_text(text=text, **kwargs)
    except TelegramError as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)

async def safe_reply_text(update: Update, text: str, **kwargs):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if update.callback_query:
        await safe_edit_message_text(update.callback_query, text, **kwargs)
    elif update.message:
        try:
            await update.message.reply_text(text=text, **kwargs)
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

async def send_bot_status(bot: Bot, status: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if ADMIN_CHAT_ID and bot:
        try:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n"
                     f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now(TIMEZONE).strftime('%H:%M %d.%m.%Y')}\n"
                     f"‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'–î–∞' if is_working_hours() else '–ù–µ—Ç'}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def publish_to_channel(app_id: int, bot: Bot) -> bool:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not CHANNEL_ID:
        logger.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False

    app_details = await get_application_details(app_id) # –ò–∑–º–µ–Ω–µ–Ω–æ: await
    if not app_details:
        logger.error(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False

    try:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=app_details['text']
        )
        await mark_application_as_published(app_id) # –ò–∑–º–µ–Ω–µ–Ω–æ: await
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {str(e)}")
        return False

async def check_pending_applications(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    applications = await get_approved_unpublished_applications() # –ò–∑–º–µ–Ω–µ–Ω–æ: await
    for app in applications:
        if app['type'] in ['news', 'announcement'] or (
            app['publish_date'] and
            datetime.strptime(str(app['publish_date']), "%Y-%m-%d").date() <= datetime.now().date()
        ):
            await publish_to_channel(app['id'], context.bot)
            await asyncio.sleep(1)

async def check_shutdown_time(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –≤—ã—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (23:00) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ"""
    if not is_working_hours():
        logger.info("–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞.")
        await send_bot_status(context.bot, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å)") # –ò–∑–º–µ–Ω–µ–Ω–æ: context.bot
        
        try:
            await context.application.stop()
            # os._exit(0) # –£–¥–∞–ª–µ–Ω–æ: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            # os._exit(1) # –£–¥–∞–ª–µ–Ω–æ: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    # required_files = [DB_FILE, BAD_WORDS_FILE] # –ò–∑–º–µ–Ω–µ–Ω–æ: –Ω–µ –Ω—É–∂–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    # missing_files = [f for f in required_files if not os.path.exists(f)]

    # if missing_files:
    #     logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
    #     sys.exit(1)

    if not TOKEN or not CHANNEL_ID or not ADMIN_CHAT_ID or not DATABASE_URL:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")
        sys.exit(1)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.")
    await safe_reply_text(
        update,
        f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª \"{CHANNEL_NAME}\".\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{REQUEST_TYPES['congrat']['icon']} {REQUEST_TYPES['congrat']['name']}", callback_data="type_congrat")],
            [InlineKeyboardButton(f"{REQUEST_TYPES['announcement']['icon']} {REQUEST_TYPES['announcement']['name']}", callback_data="type_announcement")],
            [InlineKeyboardButton(f"{REQUEST_TYPES['news']['icon']} {REQUEST_TYPES['news']['name']}", callback_data="type_news")]
        ])
    )
    return TYPE_SELECTION

async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    context.user_data['request_type'] = query.data.replace("type_", "")
    logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –∑–∞—è–≤–∫–∏: {context.user_data['request_type']}")

    if context.user_data['request_type'] == "congrat":
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"holiday_{date}")] for name, date in HOLIDAYS.items()
        ]
        keyboard.append([InlineKeyboardButton("–°–≤–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="custom_congrat_text")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])

        await safe_edit_message_text(
            query,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ \"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ\". –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONGRAT_HOLIDAY_CHOICE
    elif context.user_data['request_type'] == "announcement":
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"subtype_{key}")] for key, name in ANNOUNCE_SUBTYPES.items()
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
        await safe_edit_message_text(
            query,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ \"–û–±—ä—è–≤–ª–µ–Ω–∏–µ\". –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ANNOUNCE_SUBTYPE_SELECTION
    elif context.user_data['request_type'] == "news":
        context.user_data['subtype'] = None # –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥—Ç–∏–ø –Ω–µ –Ω—É–∂–µ–Ω
        await safe_edit_message_text(
            query,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ \"–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è\".\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return ANNOUNCE_TEXT_INPUT

async def select_congrat_holiday(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "custom_congrat_text":
        context.user_data['congrat_type'] = "custom"
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT
    elif data.startswith("holiday_"):
        holiday_date_str = data.replace("holiday_", "")
        holiday_name = next((name for name, date in HOLIDAYS.items() if date == holiday_date_str), "")
        context.user_data['congrat_type'] = holiday_name

        if is_holiday_active(holiday_date_str):
            context.user_data['text'] = HOLIDAY_TEMPLATES.get(holiday_name, "")
            await safe_edit_message_text(
                query,
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {holiday_name}. –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–°–µ–º—å—è –ò–≤–∞–Ω–æ–≤—ã—Ö\")."
            )
            return SENDER_NAME_INPUT
        else:
            await safe_edit_message_text(
                query,
                f"–ü—Ä–∞–∑–¥–Ω–∏–∫ {holiday_name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(name, callback_data=f"holiday_{date}")] for name, date in HOLIDAYS.items()
                ] + [[InlineKeyboardButton("–°–≤–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="custom_congrat_text")],
                     [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]])
            )
            return CONGRAT_HOLIDAY_CHOICE
    return ConversationHandler.END # Should not happen

async def process_custom_congrat_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    text = update.message.text
    if not text or not text.strip():
        await safe_reply_text(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    if len(text) > MAX_CONGRAT_TEXT_LENGTH:
        await safe_reply_text(update, f"–¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    context.user_data['text'] = text
    await safe_reply_text(
        update,
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–°–µ–º—å—è –ò–≤–∞–Ω–æ–≤—ã—Ö\")."
    )
    return SENDER_NAME_INPUT

async def process_sender_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    sender_name = update.message.text
    if not validate_name(sender_name):
        await safe_reply_text(update, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã (2-{MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return SENDER_NAME_INPUT

    context.user_data['from_name'] = sender_name
    await safe_reply_text(
        update,
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ò–≤–∞–Ω—É –ò–≤–∞–Ω–æ–≤–∏—á—É\")."
    )
    return RECIPIENT_NAME_INPUT

async def process_recipient_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã."""
    recipient_name = update.message.text
    if not validate_name(recipient_name):
        await safe_reply_text(update, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã (2-{MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return RECIPIENT_NAME_INPUT

    context.user_data['to_name'] = recipient_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω (–¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
    if 'text' not in context.user_data or not context.user_data['text']:
        holiday_name = context.user_data.get('congrat_type', '')
        template = HOLIDAY_TEMPLATES.get(holiday_name, "")
        if template:
            context.user_data['text'] = f"{template}\n\n"
        else:
            context.user_data['text'] = ""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫ —Ç–µ–∫—Å—Ç—É
    final_text = context.user_data['text']
    if context.user_data.get('from_name'):
        final_text += f"\n–û—Ç: {context.user_data['from_name']}"
    if context.user_data.get('to_name'):
        final_text += f"\n–î–ª—è: {context.user_data['to_name']}"

    context.user_data['text'] = final_text

    await safe_reply_text(
        update,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2024)."
    )
    return CONGRAT_DATE_INPUT

async def process_congrat_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    date_str = update.message.text
    try:
        publish_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        today = datetime.now().date()
        if publish_date < today:
            await safe_reply_text(update, "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return CONGRAT_DATE_INPUT
        context.user_data['publish_date'] = publish_date.strftime("%Y-%m-%d")
    except ValueError:
        await safe_reply_text(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return CONGRAT_DATE_INPUT

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    original_text = context.user_data['text']
    censored_text, has_bad_words = await censor_text(original_text)
    context.user_data['censored_text'] = censored_text
    context.user_data['has_bad_words'] = has_bad_words

    if has_bad_words:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (—Å —Ü–µ–Ω–∑—É—Ä–æ–π)", callback_data="approve_censor")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        await safe_reply_text(
            update,
            f"–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n\n"
            f"```\n{censored_text}\n```\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å —Ü–µ–Ω–∑—É—Ä–æ–π –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAIT_CENSOR_APPROVAL
    else:
        return await complete_request(update, context)

async def select_announce_subtype(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥—Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    context.user_data['subtype'] = query.data.replace("subtype_", "")
    logger.info(f"–í—ã–±—Ä–∞–Ω –ø–æ–¥—Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {context.user_data['subtype']}")

    await safe_edit_message_text(
        query,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ \"{ANNOUNCE_SUBTYPES[context.user_data['subtype']]}\".\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)."
    )
    return ANNOUNCE_TEXT_INPUT

async def process_announce_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è/–Ω–æ–≤–æ—Å—Ç–∏."""
    text = update.message.text
    if not text or not text.strip():
        await safe_reply_text(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return ANNOUNCE_TEXT_INPUT

    max_len = MAX_ANNOUNCE_NEWS_TEXT_LENGTH if context.user_data['request_type'] == 'news' else MAX_CONGRAT_TEXT_LENGTH
    if len(text) > max_len:
        await safe_reply_text(update, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {max_len} —Å–∏–º–≤–æ–ª–æ–≤.")
        return ANNOUNCE_TEXT_INPUT

    context.user_data['text'] = text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    original_text = context.user_data['text']
    censored_text, has_bad_words = await censor_text(original_text)
    context.user_data['censored_text'] = censored_text
    context.user_data['has_bad_words'] = has_bad_words

    if has_bad_words:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (—Å —Ü–µ–Ω–∑—É—Ä–æ–π)", callback_data="approve_censor")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        await safe_reply_text(
            update,
            f"–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n\n"
            f"```\n{censored_text}\n```\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å —Ü–µ–Ω–∑—É—Ä–æ–π –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAIT_CENSOR_APPROVAL
    else:
        return await complete_request(update, context)

async def handle_censor_approval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–Ω–∑—É—Ä–µ."""
    query = update.callback_query
    await query.answer()

    if query.data == "approve_censor":
        context.user_data['text'] = context.user_data['censored_text'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        return await complete_request(update, context)
    elif query.data == "edit_text":
        request_type = context.user_data['request_type']
        if request_type == "congrat":
            await safe_edit_message_text(query, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤).")
            return CUSTOM_CONGRAT_MESSAGE_INPUT
        elif request_type in ["announcement", "news"]:
            max_len = MAX_ANNOUNCE_NEWS_TEXT_LENGTH if request_type == 'news' else MAX_CONGRAT_TEXT_LENGTH
            await safe_edit_message_text(query, f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ (–¥–æ {max_len} —Å–∏–º–≤–æ–ª–æ–≤).")
            return ANNOUNCE_TEXT_INPUT
    elif query.data == "back_to_start":
        return await start(update, context)
    return ConversationHandler.END

async def complete_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –≤ –ë–î."""
    user_data = context.user_data
    user = update.effective_user

    app_data = {
        'user_id': user.id,
        'username': user.username or user.full_name,
        'type': user_data['request_type'],
        'subtype': user_data.get('subtype'),
        'from_name': user_data.get('from_name'),
        'to_name': user_data.get('to_name'),
        'text': user_data['text'],
        'publish_date': user_data.get('publish_date')
    }

    app_id = await add_application(app_data) # –ò–∑–º–µ–Ω–µ–Ω–æ: await

    if app_id:
        await safe_reply_text(update,
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ—à–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]])
        )
        await notify_admin_new_application(context.bot, app_id, app_data) # –ò–∑–º–µ–Ω–µ–Ω–æ: await
    else:
        await safe_reply_text(update,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]])
        )

    context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    return ConversationHandler.END

async def notify_admin_new_application(bot: Bot, app_id: int, app_data: Dict[str, Any]):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ."""
    if not ADMIN_CHAT_ID:
        return

    app_type_name = REQUEST_TYPES.get(app_data['type'], {}).get('name', app_data['type'])
    message_text = f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id} –æ—Ç @{app_data['username'] or app_data['user_id']}:\n"
    message_text += f"–¢–∏–ø: {app_type_name}"
    if app_data.get('subtype'):
        message_text += f" ({ANNOUNCE_SUBTYPES.get(app_data['subtype'], app_data['subtype'])})"
    if app_data.get('from_name'):
        message_text += f"\n–û—Ç: {app_data['from_name']}"
    if app_data.get('to_name'):
        message_text += f"\n–î–ª—è: {app_data['to_name']}"
    if app_data.get('publish_date'):
        message_text += f"\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {app_data['publish_date']}"
    message_text += f"\n\n–¢–µ–∫—Å—Ç:\n```\n{app_data['text']}\n```"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{app_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{app_id}")]
    ])

    await safe_send_message(bot, ADMIN_CHAT_ID, message_text, reply_markup=keyboard)

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if not str(query.from_user.id) == str(ADMIN_CHAT_ID): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        await safe_reply_text(update, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    action, app_id_str = data.split("_")[1], data.split("_")[2]
    app_id = int(app_id_str)

    app_details = await get_application_details(app_id) # –ò–∑–º–µ–Ω–µ–Ω–æ: await
    if not app_details:
        await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    if app_details['status'] != 'pending':
        await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{app_details['status']}'.")
        return

    user_id = app_details['user_id']
    username = app_details['username'] or str(user_id)

    if action == "approve":
        success = await update_application_status(app_id, 'approved') # –ò–∑–º–µ–Ω–µ–Ω–æ: await
        if success:
            await safe_edit_message_text(query, f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
            await safe_send_message(context.bot, user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        else:
            await safe_edit_message_text(query, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}.")
    elif action == "reject":
        success = await update_application_status(app_id, 'rejected') # –ò–∑–º–µ–Ω–µ–Ω–æ: await
        if success:
            await safe_edit_message_text(query, f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await safe_send_message(context.bot, user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await safe_edit_message_text(query, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    await safe_reply_text(update, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –º–æ–≥—É –µ—â–µ –ø–æ–º–æ—á—å?",
                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]])) # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    try:
        if update.effective_chat:
            await safe_send_message(context.bot, update.effective_chat.id,
                                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

async def post_init(application: Application) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    BOT_STATE['running'] = True
    BOT_STATE['start_time'] = datetime.now(TIMEZONE)
    BOT_STATE['last_activity'] = datetime.now(TIMEZONE)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await send_bot_status(application.bot, "–ó–∞–ø—É—â–µ–Ω")
    await init_db() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

async def pre_shutdown(application: Application) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    BOT_STATE['running'] = False
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
    await send_bot_status(application.bot, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    global db_pool
    if db_pool:
        await db_pool.close() # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∑–∞–∫—Ä—ã—Ç.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    check_environment()

    # –£–¥–∞–ª–µ–Ω–æ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
    # try:
    #     lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    #     lock_socket.bind('\0' + 'bot_lock')
    # except socket.error:
    #     print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    #     sys.exit(0)

    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    loop = asyncio.get_event_loop()
    for sig in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(sig, lambda s=sig: asyncio.create_task(shutdown_handler(s, application)))

    # Conversation Handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TYPE_SELECTION: [
                CallbackQueryHandler(select_type, pattern="^type_")
            ],
            CONGRAT_HOLIDAY_CHOICE: [
                CallbackQueryHandler(select_congrat_holiday, pattern="^holiday_"),
                CallbackQueryHandler(select_congrat_holiday, pattern="^custom_congrat_text"),
                CallbackQueryHandler(start, pattern="^back_to_start")
            ],
            CUSTOM_CONGRAT_MESSAGE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_custom_congrat_text)
            ],
            SENDER_NAME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_sender_name)
            ],
            RECIPIENT_NAME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_recipient_name)
            ],
            CONGRAT_DATE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_congrat_date)
            ],
            ANNOUNCE_SUBTYPE_SELECTION: [
                CallbackQueryHandler(select_announce_subtype, pattern="^subtype_"),
                CallbackQueryHandler(start, pattern="^back_to_start")
            ],
            ANNOUNCE_TEXT_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_announce_text)
            ],
            WAIT_CENSOR_APPROVAL: [
                CallbackQueryHandler(handle_censor_approval, pattern="^(approve_censor|edit_text|back_to_start)$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="^back_to_start$") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        ]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern="^admin_"))
    application.add_error_handler(error_handler)

    # APScheduler
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(check_pending_applications, 'interval', minutes=1, args=(application,))
    # scheduler.add_job(check_shutdown_time, 'cron', hour=23, minute=0, args=(application.job_queue,)) # –£–¥–∞–ª–µ–Ω–æ: –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è Render
    scheduler.start()

    # –î–æ–±–∞–≤–ª—è–µ–º post_init –∏ pre_shutdown –∫–æ–ª–±—ç–∫–∏
    application.post_init = post_init
    application.pre_shutdown = pre_shutdown

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def shutdown_handler(signum, application: Application):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É—é graceful shutdown...")
    await application.shutdown()
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Bot API –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É.")
    # sys.exit(0) # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º sys.exit –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å run_polling –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è

if __name__ == '__main__':
    main()


